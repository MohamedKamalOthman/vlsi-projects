#include <iostream>
#include <bitset>
#include <string>
#include <sstream>

using namespace std;

void getf(unsigned int *p)
{
    bitset<32> bits(*p);
    for (int i = 31; i >= 0; --i)
    {
        cout << bits[i];
        if (i == 31 - 0 || i == 31 - 8)
            cout << ' ';
    }
    cout << endl
         << *((float *)p);

    stringstream sstream;
    sstream << std::hex << *p;
    std::string result = sstream.str();

    cout << endl
         << result << endl;
}

int main()
{
    unsigned int f1 = 0x3FFFFFF0;
    unsigned int f2 = 0x41A00000;
    float f = *((float *)&f1) * *((float *)&f2);
    unsigned int *p = (unsigned int *)&f;
    getf(&f1);
    getf(&f2);
    getf(p);
}

// unsigned int arr1[] = {
//     0b11000000000000000000000000000000, // -2.0
//     0b00000000000000000000000000000010, // 3E-45 (su0bn)
//     0b10100000000000000000000000000010, // -1.0842024E-19
//     0b01000010000011001011000100100010, // 35.17298
//     0b01000000011000000000000000000000, // 3.5
//     0b00000000011000000000000000000000, // 8.816208E-39
//     0b10000000010000000000000000000000,
//     0b00000000000000000001000000000001, // 5.741E-42
//     0b01000000100100011110101110000101, // 4.56
//     0b00111111101010011001100110011010, // 1.325
//     0b00010100101010011001100110011010, // 1.7125224E-26
//     0b11111111111111111111111111111111, // nan
//     0b11111111111111111111111111111111, // nan
//     0b01111111100000000000000000000000, // Inf
//     0b10000000000000000000000000000000, // -0.0
//     0b11111111111111111111111111111111, // nan
//     0b10000000000000000000000000000000, // -0.0
//     0b10000000000000000000000000000000, // -0.0
//     0b10000000000000000000000000000000, // -0.0
//     0b01111111100000000000000000000000, // Inf
//     0b11111111100000000000000000000000, // -Inf
//     0b00011100001010011001100110011010, // 5.6115935E-22
//     0b00000000001111111111111111111111,
//     0b00000000011111111111111111111111,
//     0b00000110011111111111111111111111,
//     0b00000110000000000000000000000111,
//     0b00000000100000000000000000000000,
//     0b11000000001000111101011100001010};

// unsigned int arr2[] = {
//     0b00111110000000000000000000000000, // 0.125
//     0b10000000011111111111111111111111, // -1.1754942E-38 (subn)
//     0b10010100011111111111111111111111, // -1.0842024E-19
//     0b01000100011110011110010001110010, // 999.56946
//     0b01000010010111010000000000000000, // 55.25
//     0b01000000010111010000000000000000, // 3.453125
//     0b01000000011000000000000000000000,
//     0b01000000010000000000000000000000, // 3.0
//     0b01111111010000000000000000000000, // 2.5521178E38
//     0b01111111010000000000000000000000, // 2.5521178E38
//     0b00011111110000000000000000000000, // 8.1315163E-20
//     0b11111111100000000000000000000000, // -Inf
//     0b00000000000000000000000000000000, // 0.0
//     0b11111111111111111111111111111111, // nan
//     0b11111111111111111111111111111111, // nan
//     0b01000000010111010000000000000000, // 3.453125
//     0b10100000000000000000000000000010, // -1.0842024E-19
//     0b10000000000000000000000000000000, // -0.0
//     0b01111111100000000000000000000000, // Inf
//     0b10000000011111111111111111111111, // -1.1754942E-38 (subn)
//     0b11111111100000000000000000000000, // -Inf
//     0b00011111110000000000000000000000, // 8.1315163E-20
//     0b01000000011111111111111111111111,
//     0b01000000011111111111111111111111,
//     0b00111001011111111111111111111111,
//     0b00111010011111111111111111111110,
//     0b00111111000000000000000000000000,
//     0b00111111100000000000000000000000 // 1.0
// };

// unsigned int res[] = {
//     0b10111110100000000000000000000000, // -0.25
//     0b10000000000000000000000000000000, // -0.0
//     0b00000000000000000000000000000000, // 0.0 (barely, it might depend on rounding)
//     0b01000111000010010101010111010110, // 35157.836
//     0b01000011010000010110000000000000, // 193.375
//     0b00000001001001011100000000000000, // 3.0443467E-38
//     0b10000000111000000000000000000000,
//     0b00000000000000000011000000000011, // 1.7223E-41
//     0b01111111100000000000000000000000, // Inf
//     0b01111111011111100110011001100111, // 3.3815561E38
//     0b00000000000000000000000000000000, // 0.0 (rounding)
//     0b11111111111111111111111111111111, // nan
//     0b11111111111111111111111111111111, // nan
//     0b11111111111111111111111111111111, // nan
//     0b11111111111111111111111111111111, // nan
//     0b11111111111111111111111111111111, // nan
//     0b00000000000000000000000000000000, // 0.0
//     0b00000000000000000000000000000000, // 0.0
//     0b11111111111111111111111111111111, // Nan
//     0b11111111100000000000000000000000, // -Inf
//     0b01111111100000000000000000000000, // Inf
//     0b00000000000000000111111100110011, // 4.563E-41 (rounded to 0)
//     0b00000000111111111111111111111011,
//     0b00000001011111111111111111111101,
//     0b00000000011111111111111111111110,
//     0b00000001000000000000000000000101,
//     0b00000000010000000000000000000000,
//     0b11000000001000111101011100001010 // -2.56
// };

// for (int i = 0; i < 28; ++i)
// {
//     unsigned int f1 = arr1[i];
//     unsigned int f2 = arr2[i];
//     float f = *((float *)&f1) * *((float *)&f2);
//     unsigned int *p = (unsigned int *)&f;

//     if (*p != res[i])
//     {
//         printf("Error in case %d\n", i + 1);
//         getf(p);
//         getf(&res[i]);
//     }
// }